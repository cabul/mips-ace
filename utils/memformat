#!/bin/bash

die() {
	echo "$@" >&2
	exit 1
}

[[ $# -gt 0 ]] || die "No arguments"
[[ -f $1 ]] || die "Not a file"

# Configuration

# Bits per line
WIDTH=32
# Number of lines
DEPTH=512
[[ -z $MEMORY_DEPTH ]] || DEPTH=$MEMORY_DEPTH
[[ -z $MEMORY_WIDTH ]] || WIDTH=$MEMORY_WIDTH

hex2dec() {
	# Check if it is a valid number
	[[ `echo "$1" | grep -E '[a-fA-F0-9]+'` ]] || return 1
	echo $((16#$1))
}

# Script setup
POSITION=0
WORDS=0
NUMLINE=1
# Words per line
MAXWORDS=`echo "$WIDTH / 32" | bc`
# Size of memory in Bytes
MEMSIZE=`echo "$DEPTH * $MAXWORDS * 4" | bc`
TOPRINT=""

printword() {
	TOPRINT="$1$TOPRINT"
	(( POSITION += 4 ))
	(( WORDS += 1 ))
	if [[ $WORDS -eq $MAXWORDS ]] ; then
		WORDS=0
		echo "$TOPRINT"
		TOPRINT=""
	fi
}

while read LINE ; do
	# Parse line
	LINE=`echo "$LINE" | sed 's/\s\s*//g' | sed 's/;.*//g'`
	if [[ $LINE == '' ]] ; then
		(( NUMLINE ++ ))
		continue
	fi
	DATA=$LINE
	ADDRESS=$POSITION
	HADDRESS=`echo "$LINE" | sed -n 's/\([0-9a-fA-F]*\):.*/\1/p'`
	if [[ $HADDRESS != '' ]] ; then
		DATA=`echo "$LINE" | sed 's/[^:]*://'`
		# Fill empty spaces with 0s
		ADDRESS=`hex2dec $HADDRESS` || die "Line $NUMLINE: Address has wrong format"
		[[ $POSITION -gt $ADDRESS ]] && die "Line $NUMLINE: Address out of order"
		while [[ $POSITION -lt $ADDRESS ]] ; do
			printword "00000000"
		done
	fi
	# Check memory space
	[[ $ADDRESS -lt $MEMSIZE ]] || die "Line $NUMLINE: Address $ADDRESS out of bounds"
	[[ $DATA != '' ]] && printword "$DATA"
	(( NUMLINE++ ))
done < $1

# Fill memory
while [[ $POSITION -lt $MEMSIZE ]] ; do
	printword "00000000"
done
