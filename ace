#!/bin/bash

[[ $_ != $0 ]] && {
export PATH="$PATH:$PWD"
export CFLAGS=""
export ROOTDIR=$PWD
echo 'Setup done'
return 0
}

[[ -z $ROOTDIR ]] || cd $ROOTDIR

NC='\033[0m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'

die() {
	echo "$@" >&2
	exit 1
}

usage() {
	echo 'usage: ace <command> [<args>]'
	echo
	echo 'The following commands are available:'
	echo '   todo     List todos and fixmes in source files'
	echo '   check    Check if module compiles correctly'
	echo '   test     Compile and run testbench'
	echo '   create   Create boilerplate testbench or module'
	echo '   clean    Remove all intermediate files'
	echo '   run      Run assembly or memory'
	echo '   asm      Convert assembly to hex'
	echo
	echo 'To learn more about the options for the'
	echo 'different commands try ace help <command>'
	exit 1
}

details() {
	case $1 in
		todo)
			echo 'usage: ace todo [-A] [-q] [<file>]'
			echo
			echo '   -A   Gets all todos'
			echo '   -q   Quiet'
			echo
			echo 'List all TODO and FIXME tokens in source files (.v).'
			;;
		check)
			echo 'usage: ace check [-A] [-q] [<file>]'
			echo
			echo '   -A   Check all files'
			echo '   -q   Quiet, no error messages'
			echo
			echo 'Tries to compile source file (.v). This is useful for'
			echo 'syntax checking'
			;;
		test)
			echo 'usage: ace test [-v] [-d <flag>] [-g] [-t <trace>] <testbench>'
			echo
			echo '   -t   Writes trace to <trace>'
			echo '   -g   Graphical mode (GTKWave)'
			echo '   -v   Verbose mode'
			echo '   -d   Add debug flag'
			echo
			echo 'All testbenches are located in the test folder.'
			echo 'GTKWave needs a valid trace file'
			;;
		create)
			echo 'usage: ace create <module>'
			echo
			echo 'All modules are located in the src folder, all'
			echo 'testbenches in the test folder. Testbenches should'
			echo 'end on _tb.'
			;;
		clean)
			echo 'usage: ace clean'
			;;
		run)
			echo 'usage: ace run [-t <trace>] [-d <flag>] [-v] [-g] [-m <main>] <program>'
			echo
			echo '   -t   Name for tracefile'
			echo '   -g   Graphical mode (GTKWave)'
			echo '   -m   Main module (default: cpu_tb)'
			echo '   -v   Verbose mode'
			echo '   -d   Add debug flag'
			echo
			echo 'This command builds the cpu and runs a program against it.'
			echo 'You can either use assembly source code or a hexadecimal'
			echo 'file containing the memory input data. The memory format is'
			echo 'defined by MEMORY_WIDTH and MEMORY_DEPTH env variables.'

			;;
		asm)
			echo 'Not implemented yet'
			;;
		*)
			echo "Unrecognized command $1"
			;;
	esac
	exit 1
}

clean() {
	rm -rf build/
}

# $1 -> file
compile() {
	FILE=$1
	BUILD=`basename ${1%.v}`
	[[ -z $MEMORY_DEPTH ]] || CFLAGS="$CFLAGS -DMEMORY_DEPTH=$MEMORY_DEPTH"
	[[ -z $MEMORY_WIDTH ]] || CFLAGS="$CFLAGS -DMEMORY_WIDTH=$MEMORY_WIDTH"
	iverilog -o build/run.vvp $CFLAGS -Isrc -Itest `utils/list-deps $FILE`
}

check_files() {
	[[ $# -gt 0 ]] || return 1
	for FILE in $@ ; do
		if compile $FILE 2> build/compile.log ; then
			echo -e "[${GREEN}Ok${NC}]    $FILE"
		else
			echo -e "[${RED}Error${NC}] $FILE"
			[[ $ARG_QUIET -eq 1 ]] || cat build/compile.log
		fi
	done
}

check() {
	ARG_ALL=0
	ARG_QUIET=0
	TEMP=`getopt -o Aq -- "$@"` 
	eval set -- "$TEMP"
	mkdir -p build
	while true ; do
		case "$1" in
			-A) ARG_ALL=1 ; shift ;;
			-q) ARG_QUIET=1 ; shift ;;
			--) shift ; break ;;
			*) die "Unrecognized option $1" ;;
		esac
	done
	if [[ $ARG_ALL -eq 1 ]] ; then
		FILES=(`find . -type f -name "*.v" -not -name "defines.v"`)
		check_files ${FILES[@]}
	else
		[[ $# -gt 0 ]] || die 'No arguments'
		for ARG in "$@" ; do
			ARG=${ARG%.v}.v
			FILES=(`find . -type f -path "./*${ARG}"`)
			check_files ${FILES[@]} || echo -e "[${RED}Error${NC}] $ARG not found"
		done
	fi
}

list_todos() {
	awk '/\/{2}\s*TODO\s*(.*)/ {
		gsub(/[^/]*\/*\s*TODO\s*/, "");
		print $0; f=1
	} END { exit f }' $1 > build/todo.log
}


todo_files() {
	[[ $# -gt 0 ]] || return 1
	for FILE in $@ ; do
		if list_todos $FILE ; then
			echo -e "[${GREEN}Ok${NC}]   $FILE"
		else
			echo -e "[${BLUE}Todo${NC}] $FILE"
			[[ $ARG_QUIET -eq 1 ]] || cat build/todo.log
		fi
	done
}

todo() {
	ARG_ALL=0
	ARG_QUIET=0
	TEMP=`getopt -o Aq -- "$@"`
	eval set -- "$TEMP"
	mkdir -p build
	while true ; do
		case "$1" in
			-A) ARG_ALL=1 ; shift ;;
			-q) ARG_QUIET=1 ; shift ;;
			--) shift ; break ;;
			*) die "Unrecognized option $1" ;;
		esac
	done
	if [[ $ARG_ALL -eq 1 ]] ; then
		FILES=(`find . -type f -name "*.v"`)
		todo_files ${FILES[@]}
	else
		[[ $# -gt 0 ]] || die "No arguments"
		for ARG in "$@" ; do
			ARG=${ARG%.v}.v
			FILES=(`find . -type f -path "./*${ARG}"`)
			todo_files ${FILES[@]} || echo -e "[${RED}Error${NC}] $ARG not found"
		done
	fi
}

runtest() {
	[[ -z $ARG_TRACE ]] || CFLAGS="$CFLAGS -DTRACEFILE=\"$ARG_TRACE\""
	FILE=${1%.v}.v
	compile $FILE 2> build/compile.log || {
		[[ $ARG_VERBOSE -eq 1 ]] && cat build/compile.log
		die "Unable to build"
	}
	build/run.vvp
	[[ $ARG_GTK -eq 1 ]] && [[ -z $ARG_TRACE ]] && die 'Option -g ignored'
	[[ $ARG_GTK -eq 1 ]] || exit 0
	ps | grep -sq gtkwave && die "GTKWave already running"
	gtkwave -A -f $ARG_TRACE >/dev/null 2>&1 &
}

testbench() {
	TEMP=`getopt -o d:vgt: -- "$@"`
	ARG_GTK=0
	ARG_VERBOSE=0
	ARG_TRACE=
	eval set -- "$TEMP"
	mkdir -p build
	while true ; do
		case "$1" in
			-d) CFLAGS="$CFLAGS -D$2" ; shift 2 ;;
			-g) ARG_GTK=1 ; shift ;;
			-v) ARG_VERBOSE=1 ; shift ;;
			-t) ARG_TRACE=${2%.vcd}.vcd ; shift 2 ;;
			--) shift ; break ;;
			*) die "Unrecognized option $1" ;;
		esac
	done
	[[ $# -gt 0 ]] || die "No testbench"
	runtest "$1"
}

run() {
	TEMP=`getopt -o d:vgt:m:d: -- "$@"`
	ARG_GTK=0
	ARG_VERBOSE=0
	ARG_MAIN="test/cpu_tb.v"
	ARG_TRACE=
	eval set -- "$TEMP"
	mkdir -p build
	while true ; do
		case "$1" in
			-d) CFLAGS="$CFLAGS -D$2" ; shift 2 ;;
			-g) ARG_GTK=1 ; shift ;;
			-v) ARG_VERBOSE=1 ; shift ;;
			-t) ARG_TRACE=${2%.vcd}.vcd ; shift 2 ;;
			-m) ARG_MAIN=${2%.v}.v ; shift 2 ;;
			--) shift ; break ;;
			*) die "Unrecognized option $1" ;;
		esac
	done
	[[ $# -gt 0 ]] || die "No program"
	utils/memformat $1 > build/memory.dat 2> build/memory.log || {
		[[ $ARG_VERBOSE -eq 1 ]] && cat build/memory.log
		die "Bad memory"
	}
	runtest "$ARG_MAIN"
}

[[ $# -gt 0 ]] || usage

CMD=$1
shift

case $CMD in
	help)
		[[ $# -gt 0 ]] || usage
		details $1
		;;
	check) check "$@" ;;
	todo) todo "$@" ;;
	create)
		[[ $# -gt 0 ]] || die 'No arguments'
		utils/boilerplate "${1%.v}" ;;
	clean) clean ;;
	test) testbench "$@" ;;
	run) run "$@" ;;
	asm) die "Not implemented yet" ;;
	*) usage ;;
esac
