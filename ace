#!/bin/bash

NC='\033[0m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'

die() {
	echo "$@" >&2
	exit 1
}

usage() {
	echo 'usage: ace <command> [<args>]'
	echo
	echo 'The following commands are available:'
	echo '   todo     List todos and fixmes in source files'
	echo '   check    Check if module compiles correctly'
	echo '   test     Compile and run testbench'
	echo '   create   Create boilerplate testbench or module'
	echo '   clean    Remove all intermediate files'
	echo '   run      Run assembly or memory'
	echo '   asm      Convert assembly to hex'
	echo
	echo 'To learn more about the options for the'
	echo 'different commands try ace help <command>'
	exit 1
}

details() {
	case $1 in
		todo)
			echo 'usage: ace todo [-A] [-d] [-q] [<file>]'
			echo
			echo '   -A   Gets all todos'
			echo '   -q   Quiet'
			echo
			echo 'List all TODO and FIXME tokens in source files (.v).'
			;;
		check)
			echo 'usage: ace check [-A] [-q] [<file>]'
			echo
			echo '   -A   Check all files'
			echo '   -q   Quiet, no error messages'
			echo
			echo 'Tries to compile source file (.v). This is useful for'
			echo 'syntax checking'
			;;
		test)
			echo 'usage: ace test [-g] [-t <trace>] <testbench>'
			echo
			echo '   -t   Writes trace to <trace>'
			echo '   -g   Graphical mode (GTKWave)'
			echo
			echo 'All testbenches are located in the test folder.'
			echo 'GTKWave needs a valid trace file'
			;;
		create)
			echo 'usage: ace create <module>]'
			echo
			echo 'All modules are located in the src folder, all'
			echo 'testbenches in the test folder. Testbenches should'
			echo 'end on _tb.'
			;;
		clean)
			echo 'usage: ace clean'
			;;
		run)
			echo 'usage: ace run [-t <trace>] [-g] [-o <output>] [-m <main>] <program>'
			echo
			echo '   -t   Name for tracefile'
			echo '   -g   Graphical mode (GTKWave)'
			echo '   -d   Location for memory dump'
			echo '   -m   Main module (default: cpu_tb)'
			echo '   -x   Exit after x seconds (default: 100000)'
			echo
			echo 'This command builds the cpu and runs a program against it.'
			echo 'You can either use assembly source code or a hexadecimal'
			echo 'file containing the memory input data'
			;;
		asm)
			echo 'Not implemented yet'
			;;
		*)
			echo "Unrecognized command $1"
			;;
	esac
	exit 1
}

clean() {
	rm -rf build/
}

# $1 -> file
compile() {
	FILE=$1
	BUILD=`basename ${1%.v}`
	iverilog -o build/$BUILD $CFLAGS -Isrc -Itest `utils/list-deps $FILE`
}

check_files() {
	[[ $# -gt 0 ]] || return 1
	for FILE in $@ ; do
		if compile $FILE 2> build/tmp ; then
			echo -e "[${GREEN}Ok${NC}]    $FILE"
		else
			echo -e "[${RED}Error${NC}] $FILE"
			[[ $ARG_QUIET -eq 1 ]] || cat build/tmp
		fi
	done
}

check() {
	ARG_ALL=0
	ARG_QUIET=0
	TEMP=`getopt -o Aq -- "$@"` 
	eval set -- "$TEMP"
	mkdir -p build
	while true ; do
		case "$1" in
			-A) ARG_ALL=1 ; shift ;;
			-q) ARG_QUIET=1 ; shift ;;
			--) shift ; break ;;
			*) die "Unrecognized option $1" ;;
		esac
	done
	if [[ $ARG_ALL -eq 1 ]] ; then
		FILES=(`find . -type f -name "*.v"`)
		check_files ${FILES[@]}
	else
		[[ $# -gt 0 ]] || die "No files specified"
		for ARG in "$@" ; do
			ARG=${ARG%.v}.v
			FILES=(`find . -type f -path "./*${ARG}"`)
			check_files ${FILES[@]} || echo -e "[${RED}Error${NC}] $ARG not found"
		done
	fi
}

list_todos() {
	awk '/\/{2}\s*TODO\s*(.*)/ {
		gsub(/[^/]*\/*\s*TODO\s*/, "");
		print $0; f=1
	} END { exit f }' $1 > build/tmp
}


todo_files() {
	[[ $# -gt 0 ]] || return 1
	for FILE in $@ ; do
		if list_todos $FILE ; then
			echo -e "[${GREEN}Ok${NC}]   $FILE"
		else
			echo -e "[${BLUE}Todo${NC}] $FILE"
			[[ $ARG_QUIET -eq 1 ]] || cat build/tmp
		fi
	done
}

todo() {
	ARG_ALL=0
	ARG_QUIET=0
	TEMP=`getopt -o Aq -- "$@"`
	eval set -- "$TEMP"
	mkdir -p build
	while true ; do
		case "$1" in
			-A) ARG_ALL=1 ; shift ;;
			-q) ARG_QUIET=1 ; shift ;;
			--) shift ; break ;;
			*) die "Unrecognized option $1" ;;
		esac
	done
	if [[ $ARG_ALL -eq 1 ]] ; then
		FILES=(`find . -type f -name "*.v"`)
		todo_files ${FILES[@]}
	else
		[[ $# -gt 0 ]] || die "No files specified"
		for ARG in "$@" ; do
			ARG=${ARG%.v}.v
			FILES=(`find . -type f -path "./*${ARG}"`)
			todo_files ${FILES[@]} || echo -e "[${RED}Error${NC}] $ARG not found"
		done
	fi
}

runtest() {
	[[ $# -gt 0 ]] || die "No testbench"
	[[ -z $ARG_TRACE ]] || CFLAGS="$CFLAGS -DTRACEFILE=\"$ARG_TRACE\""
	FILE=${1%.v}.v
	compile $FILE 2> build/tmp || die "Unable to build"
	build/`basename ${1%.v}`
	[[ $ARG_GTK -eq 1 ]] || exit 0
	ps | grep -sq gtkwave && die "GTKWave already running"
	gtkwave -A -f $ARG_TRACE >/dev/null 2>&1 &
}

testbench() {
	TEMP=`getopt -o gt: -- "$@"`
	ARG_GTK=0
	eval set -- "$TEMP"
	mkdir -p build
	while true ; do
		case "$1" in
			-g) ARG_GTK=1 ; shift ;;
			-t) ARG_TRACE=${2%.vcd}.vcd ; shift 2 ;;
			--) shift ; break ;;
			*) die "Unrecognized option $1" ;;
		esac
	done
	runtest "$1"
}

run() {
	TEMP=`getopt -o gx:t:m:d: -- "$@"`
	ARG_GTK=0
	ARG_MAIN="test/cpu_tb.v"
	eval set -- "$TEMP"
	mkdir -p build
	while true ; do
		case "$1" in
			-g) ARG_GTK=1 ; shift ;;
			-t) ARG_TRACE=${2%.vcd}.vcd ; shift 2 ;;
			-m) ARG_MAIN=${2%.v}.v ; shift 2 ;;
			-o) ARG_OUTPUT=$2 ; shift 2 ;;
			--) shift ; break ;;
			*) die "Unrecognized option $1" ;;
		esac
	done
	[[ $# -gt 0 ]] || die "No program"
	[[ -z $ARG_OUTPUT ]] || CFLAGS="$CFLAGS -DMEMDUMP=\"$ARG_OUTPUT\""
	CFLAGS="$CFLAGS -DMEMDATA=\"$1\" -DMEMSIZE=`wc -l $1`"
	runtest "$ARG_MAIN"
}

[[ $# -gt 0 ]] || usage

CMD=$1
shift

case $CMD in
	help)
		[[ $# -gt 0 ]] || usage
		details $1
		;;
	check) check "$@" ;;
	todo) todo "$@" ;;
	create) utils/boilerplate "${1%.v}" ;;
	clean) clean ;;
	test) testbench "$@" ;;
	run) run "$@" ;;
	*) usage ;;
esac
